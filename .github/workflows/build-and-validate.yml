name: Build AMI and Validate (Packer + Ansible - HTTP Validation)

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build-ami:
    name: Build AMI with Packer
    runs-on: ubuntu-latest
    outputs:
      ami_id: ${{ steps.extract.outputs.ami_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set AWS environment variables (from secrets)
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          if [ -n "${{ secrets.AWS_SESSION_TOKEN }}" ]; then
            echo "AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}" >> $GITHUB_ENV
          fi
          echo "AWS_REGION=${{ secrets.AWS_REGION || 'us-east-1' }}" >> $GITHUB_ENV

      - name: Setup Packer
        uses: hashicorp/setup-packer@v2
        with:
          packer_version: "1.9.0"

      - name: Initialize packer
        run: packer init packer || true

      - name: Validate packer template
        run: packer validate packer/template.pkr.hcl

      - name: Build AMI (packer)
        id: packer_build
        run: |
          set -o pipefail
          packer build -machine-readable packer/template.pkr.hcl 2>&1 | tee packer-output.log

      - name: Extract AMI ID
        id: extract
        run: |
          line=$(grep 'artifact,0,id' packer-output.log | tail -n1 || true)
          if [ -z "$line" ]; then
            echo "No AMI id found in packer output"
            exit 1
          fi
          ami=$(echo "$line" | cut -d',' -f6 | sed 's/^[^:]*://')
          echo "ami_id=$ami" >> $GITHUB_OUTPUT
          echo "AMI produced: $ami"

  validate-ami:
    name: Validate AMI (Ansible)
    runs-on: ubuntu-latest
    needs: build-ami
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set AWS environment variables (from secrets)
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          if [ -n "${{ secrets.AWS_SESSION_TOKEN }}" ]; then
            echo "AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}" >> $GITHUB_ENV
          fi
          echo "AWS_REGION=${{ secrets.AWS_REGION || 'us-east-1' }}" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible and AWS deps
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3 botocore amazon.aws

      - name: Run Ansible validation
        id: ansible_run
        env:
          AMI_ID: ${{ needs.build-ami.outputs.ami_id }}
          RUN_ID: ${{ github.run_id }}
        run: |
          ansible-playbook ansible/validate_ami.yml                     --extra-vars "ami_id=${AMI_ID} run_id=${RUN_ID} aws_region=${{ secrets.AWS_REGION || 'us-east-1' }}"

      - name: Upload validation artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ami-validation-result
          path: ami-validate-*.txt
